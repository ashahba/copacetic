"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2676],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},v=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),s=p(n),v=r,m=s["".concat(l,".").concat(v)]||s[v]||d[v]||i;return n?o.createElement(m,a(a({ref:t},u),{},{components:n})):o.createElement(m,a({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=v;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[s]="string"==typeof e?e:r,a[1]=c;for(var p=2;p<i;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}v.displayName="MDXCreateElement"},9303:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>s,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const i={title:"Copa Github Action"},a=void 0,c={unversionedId:"github-action",id:"version-v0.4.x/github-action",title:"Copa Github Action",description:"Overview",source:"@site/versioned_docs/version-v0.4.x/github-action.md",sourceDirName:".",slug:"/github-action",permalink:"/copacetic/website/v0.4.x/github-action",draft:!1,tags:[],version:"v0.4.x",frontMatter:{title:"Copa Github Action"},sidebar:"sidebar",previous:{title:"Code of Conduct",permalink:"/copacetic/website/v0.4.x/code-of-conduct"},next:{title:"Release Process",permalink:"/copacetic/website/v0.4.x/release"}},l={},p=[{value:"Overview",id:"overview",level:2},{value:"Inputs",id:"inputs",level:2},{value:"<code>image</code>",id:"image",level:2},{value:"<code>image-report</code>",id:"image-report",level:2},{value:"<code>patched-tag</code>",id:"patched-tag",level:2},{value:"<code>buildkit-version</code>",id:"buildkit-version",level:2},{value:"<code>copa-version</code>",id:"copa-version",level:2},{value:"Output",id:"output",level:2},{value:"<code>patched-image</code>",id:"patched-image",level:2},{value:"Example Workflow",id:"example-workflow",level:2}],u={toc:p};function s(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/project-copacetic/copa-action"},"Copa Github Action")," allows you patch vulnerable containers in your workflows using Copa. "),(0,r.kt)("h2",{id:"inputs"},"Inputs"),(0,r.kt)("h2",{id:"image"},(0,r.kt)("inlineCode",{parentName:"h2"},"image")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Required")," The image reference to patch."),(0,r.kt)("h2",{id:"image-report"},(0,r.kt)("inlineCode",{parentName:"h2"},"image-report")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Required")," The trivy json vulnerability report of the image to patch."),(0,r.kt)("h2",{id:"patched-tag"},(0,r.kt)("inlineCode",{parentName:"h2"},"patched-tag")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Required")," The new patched image tag."),(0,r.kt)("h2",{id:"buildkit-version"},(0,r.kt)("inlineCode",{parentName:"h2"},"buildkit-version")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Optional")," The buildkit version used in the action, default is latest."),(0,r.kt)("h2",{id:"copa-version"},(0,r.kt)("inlineCode",{parentName:"h2"},"copa-version")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Optional")," The Copa version used in the action, default is latest."),(0,r.kt)("h2",{id:"output"},"Output"),(0,r.kt)("h2",{id:"patched-image"},(0,r.kt)("inlineCode",{parentName:"h2"},"patched-image")),(0,r.kt)("p",null,"Image reference of the resulting patched image."),(0,r.kt)("h2",{id:"example-workflow"},"Example Workflow"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"on: [push]\n\njobs:\n    test:\n        runs-on: ubuntu-latest\n\n        strategy:\n          fail-fast: false\n          matrix:\n            # provide relevant list of images to scan on each run\n            images: ['docker.io/library/nginx:1.21.6', 'docker.io/openpolicyagent/opa:0.46.0', 'docker.io/library/hello-world:latest']\n\n        steps:\n        - name: Set up Docker Buildx\n          uses: docker/setup-buildx-action@dedd61cf5d839122591f5027c89bf3ad27691d18\n\n        - name: Generate Trivy Report\n          uses: aquasecurity/trivy-action@69cbbc0cbbf6a2b0bab8dcf0e9f2d7ead08e87e4\n          with:\n            scan-type: 'image'\n            format: 'json'\n            output: 'report.json'\n            ignore-unfixed: true\n            vuln-type: 'os'\n            image-ref: ${{ matrix.images }}\n\n        - name: Check Vuln Count\n          id: vuln_count\n          run: |\n            report_file=\"report.json\"\n            vuln_count=$(jq '.Results | length' \"$report_file\")\n            echo \"vuln_count=$vuln_count\" >> $GITHUB_OUTPUT\n\n        - name: Copa Action\n          if: steps.vuln_count.outputs.vuln_count != '0'\n          id: copa\n          uses: project-copacetic/copa-action@v1\n          with:\n            image: ${{ matrix.images }}\n            image-report: 'report.json'\n            patched-tag: 'patched'\n            buildkit-version: 'v0.11.6'\n            # optional, default is latest\n            copa-version: '0.4.1'\n\n        - name: Login to Docker Hub\n          if: steps.copa.conclusion == 'success'\n          id: login\n          uses: docker/login-action@b4bedf8053341df3b5a9f9e0f2cf4e79e27360c6\n          with:\n            username: 'user'\n            password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n        - name: Docker Push Patched Image\n          if: steps.login.conclusion == 'success'\n          run: |\n            docker push ${{ steps.copa.outputs.patched-image }}\n\n")))}s.isMDXComponent=!0}}]);