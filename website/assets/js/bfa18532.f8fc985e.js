"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3665],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=i,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return t?a.createElement(g,o(o({ref:n},c),{},{components:t})):a.createElement(g,o({ref:n},c))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9771:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=t(7462),i=(t(7294),t(3905));const r={title:"Scanner Plugins"},o="Motivation",s={unversionedId:"scanner-plugins",id:"scanner-plugins",title:"Scanner Plugins",description:"By default, copa uses Trivy to scan container images for vulnerabilities. However, we understand that different organizations have different requirements and may want to use different vulnerability scanners.",source:"@site/docs/scanner-plugins.md",sourceDirName:".",slug:"/scanner-plugins",permalink:"/copacetic/website/next/scanner-plugins",draft:!1,tags:[],version:"current",frontMatter:{title:"Scanner Plugins"},sidebar:"sidebar",previous:{title:"Output",permalink:"/copacetic/website/next/output"},next:{title:"Contributing",permalink:"/copacetic/website/next/contributing"}},l={},p=[{value:"v1alpha1",id:"v1alpha1",level:2}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"motivation"},"Motivation"),(0,i.kt)("p",null,"By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"copa")," uses ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/aquasecurity/trivy"},"Trivy")," to scan container images for vulnerabilities. However, we understand that different organizations have different requirements and may want to use different vulnerability scanners."),(0,i.kt)("p",null,"Starting with v0.5.0 and later, ",(0,i.kt)("inlineCode",{parentName:"p"},"copa")," offers extensibility to support different vulnerability scanners. Plugin architecture allows users to use the vulnerability scanner of their choice to patch container images without having to modify ",(0,i.kt)("inlineCode",{parentName:"p"},"copa"),"'s core codebase."),(0,i.kt)("h1",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Scanner plugin binaries must be in ",(0,i.kt)("inlineCode",{parentName:"p"},"$PATH"),", and should be prefixed with ",(0,i.kt)("inlineCode",{parentName:"p"},"copa-")," and have executable permissions. Copa will automatically detect and use the scanner plugin if it is in ",(0,i.kt)("inlineCode",{parentName:"p"},"$PATH"),"."),(0,i.kt)("p",null,"For example, if you have a scanner plugin binary called ",(0,i.kt)("inlineCode",{parentName:"p"},"copa-foo")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"$PATH"),", you can run ",(0,i.kt)("inlineCode",{parentName:"p"},"copa")," with the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"copa patch --scanner foo --image $IMAGE ...\n")),(0,i.kt)("h1",{id:"scanner-plugins-from-the-community"},"Scanner Plugins from the Community"),(0,i.kt)("p",null,"If you have built a scanner plugin and would like to add it to this list, please submit a PR to update this section with your plugin."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"If you have any issues with a specific plugin, please open an issue in the applicable plugin's repository.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Grype: ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/anubhav06/copa-grype"},"https://github.com/anubhav06/copa-grype"))),(0,i.kt)("h1",{id:"writing-a-scanner-plugin"},"Writing a Scanner Plugin"),(0,i.kt)("p",null,"Please see instructions at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/project-copacetic/scanner-plugin-template"},"Scanner Plugin Template")," for a template to get started with writing a scanner plugin."),(0,i.kt)("h1",{id:"scanner-plugin-interface"},"Scanner Plugin Interface"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"alpha")," versions of the API are not guarenteed to be backwards compatible. Once the API graduates to ",(0,i.kt)("inlineCode",{parentName:"p"},"beta")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"stable"),", it will be backwards compatible.")),(0,i.kt)("p",null,"Scanner plugins must implement the following interface:"),(0,i.kt)("h2",{id:"v1alpha1"},"v1alpha1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'type UpdateManifest struct {\n    // API version of the interface (e.g. v1alpha1)\n    APIVersion string         `json:"apiVersion"`\n    // Metadata contains information about the OS and config\n    Metadata   Metadata       `json:"metadata"`\n    // Updates is a list of UpdatePackage that contains information about the package updates\n    Updates    UpdatePackages `json:"updates"`\n}\n\n// UpdatePackages is a list of UpdatePackage\ntype UpdatePackages []UpdatePackage\n\n// Metadata contains information about the OS and config\ntype Metadata struct {\n    OS     OS     `json:"os"`\n    Config Config `json:"config"`\n}\n\ntype OS struct {\n    // OS Type (e.g. debian, alpine, etc.)\n    Type    string `json:"type"`\n    // OS Version (e.g. 11.3)\n    Version string `json:"version"`\n}\n\n// Config contains information about the config\ntype Config struct {\n    // OS Architecture (e.g. amd64, arm64)\n    Arch string `json:"arch"`\n}\n\n// UpdatePackage contains information about the package update\ntype UpdatePackage struct {\n    // Package name\n    Name             string `json:"name"`\n    // Installed version\n    InstalledVersion string `json:"installedVersion"`\n    // Fixed version\n    FixedVersion     string `json:"fixedVersion"`\n    // Vulnerability ID\n    VulnerabilityID  string `json:"vulnerabilityID"`\n}\n')),(0,i.kt)("p",null,"From the above, we can see that the plugin must return a JSON object via standard out with the following fields. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "apiVersion": "v1alpha1",\n  "metadata": {\n    "os": {\n        "type": "debian",\n        "version": "11.3",\n    },\n    "config": {\n      "arch": "amd64"\n    }\n  },\n  "updates": [\n      {\n          "name": "libcurl4",\n          "installedVersion": "7.74.0-1.3+deb11u1",\n          "fixedVersion": "7.74.0-1.3+deb11u2",\n          "vulnerabilityID": "CVE-2021-22945"\n      }\n  ]\n}\n')))}u.isMDXComponent=!0}}]);